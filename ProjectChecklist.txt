# 15 Project 2: Interactive Full-Stack Application

## Project Requirements


1. Use Node.js and Express.js to create a RESTful API.

2. Use Handlebars.js as the template engine.

3. Use MySQL and the Sequelize ORM for the database.

4. Have both GET and POST routes for retrieving and adding new data.

5. Use at least one new library, package, or technology that we havenâ€™t discussed.

DONE---6. Have a folder structure that meets the MVC paradigm.

7. Include authentication (express-session and cookies).

8. Protect API keys and sensitive information with environment variables.

9. Be deployed using Heroku (with data).

10. Have a polished UI.

11. Be responsive and interactive (i.e., accept and respond to user input).

12. Meet good-quality coding standards (file structure, naming conventions, follows best practices for class/id naming conventions, indentation, quality comments, etc.).

13. Have a professional README (with unique name, description, technologies used, screenshot, and link to deployed application).

14. Use this [project presentation template](https://docs.google.com/presentation/d/10QaO9KH8HtUXj__81ve0SZcpO5DbMbqqQr4iPpbwKks/edit?usp=sharing) to address the following: 

    --Elevator pitch: a one minute description of your application
    --Concept: What is your user story? What was your motivation for development?
    --Process: What were the technologies used? How were tasks and roles broken down and assigned? What challenges did you encounter? What were your successes?
    --Demo: Show your stuff!
    --Directions for Future Development

15. Links to the deployed application and the GitHub repository. Use the [Guide to Deploy with Heroku and MySQL](https://coding-boot-camp.github.io/full-stack/heroku/deploy-with-heroku-and-mysql) on The Full-Stack Blog if you need a reminder on how to deploy to Heroku.

16. Application uses a Node.js and Express.js back end and uses both GET and POST routes for retrieving and adding new data.

17. Application has a folder structure that meets the MVC paradigm and uses Handlebars.js as the template engine.

18. Application is backed by a MySQL database with a Sequelize ORM and protects API keys and sensitive information with environment variables.

19. Application includes user authentication (express-session and cookies).

20. Application uses at least one new library, package, or technology not covered in class.

21. Application should be a unique and novel idea.

22. Application deployed at live URL on Heroku and loads with no errors.

* Application GitHub URL submitted.

DONE---23. Repository has a unique name.

24.  Repository follows best practices for class/id-naming conventions, indentation, quality comments, etc.

25. Repository contains multiple descriptive commit messages.

26. Repository contains quality README file with description, screenshot, and link to deployed application.

DONE---27. Your group should present using a slide deck.

28. Each member of your group** is required to submit the following for review:

    -- The URL of the deployed application.
    -- The URL of the GitHub repository, with a unique name and a README describing the project.